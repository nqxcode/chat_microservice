name: Go

on:
  push:
    branches: [ main, master, week_1, week_2 ]
  pull_request:
    branches: [ main, master, week_1, week_2 ]

env:
  REGISTRY: "cr.selcloud.ru/nqxcode"
  IMAGE_NAME: "chat-microservice"
  CONTAINER_NAME: "chat-microservice-container"
  MIGRATION_IMAGE_NAME: "chat-microservice-migration"
  MIGRATION_CONTAINER_NAME: "chat-microservice-migration-container"
  POSTGRES_IMAGE_NAME: "postgres:14-alpine3.17"
  POSTGRES_CONTAINER_NAME: "postgres-container"
  VOLUME: "chat_postgres_volume"
  NETWORK: "chat_network"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3

        - name: Set up Go
          uses: actions/setup-go@v4
          with:
            go-version: '1.22'
            cache-dependency-path: go.sum

        - name: Build
          run: go build -o ./bin/ -v ./...

        - name: Test
          run: go test -v ./...

  linter:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.59

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          args: --timeout=30m --config=./.golangci.pipeline.yaml

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

  image-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME -f ./Dockerfile ./
          docker buildx build --no-cache --push --tag $REGISTRY/$MIGRATION_IMAGE_NAME:$TAG_NAME -f ./migration.Dockerfile ./

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push

    steps:
      - name: Deploy to Selectel Cloud via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          script: |
            # Set up variables
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            
            # Login into Selectel Registry
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
            
            REGISTRY="cr.selcloud.ru/nqxcode"
            
            POSTGRES_IMAGE_NAME="postgres:14-alpine3.17"
            IMAGE_NAME="chat-microservice"
            MIGRATION_IMAGE_NAME="chat-microservice-migration"
            
            POSTGRES_CONTAINER_NAME="postgres-container"
            CONTAINER_NAME="chat-microservice-container"
            MIGRATION_CONTAINER_NAME="chat-microservice-migration-container"
            
            NETWORK="chat_network"
            VOLUME="chat_postgres_volume"
            
            #docker network ls | grep $NETWORK || docker network create $NETWORK
            #docker volume ls | grep $VOLUME || docker volume create $VOLUME
            
            # Stop running containers
            docker stop $POSTGRES_CONTAINER_NAME
            #docker stop $MIGRATION_CONTAINER_NAME
            #docker stop $CONTAINER_NAME
            
            # Remove old containers
            docker rm $POSTGRES_CONTAINER_NAME
            #docker rm $MIGRATION_CONTAINER_NAME
            #docker rm $CONTAINER_NAME
            
            # Run a new containers from a new images
            docker run -d --name $POSTGRES_CONTAINER_NAME --network $NETWORK -v $VOLUME:/var/lib/postgresql/data -e POSTGRES_USER="${{ secrets.POSTGRES_USER }}" -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" -e POSTGRES_DB="${{ secrets.POSTGRES_DB }}" -t $POSTGRES_IMAGE_NAME
            
            docker run -d --name "chat-microservice-migration-container" --network "chat_network" -e MIGRATION_DIR=./migrations -e MIGRATION_DSN="${{ secrets.MIGRATION_DSN }}" -t $REGISTRY/$MIGRATION_IMAGE_NAME:$TAG_NAME
            
            #docker run -d --name $CONTAINER_NAME --network $NETWORK -p 50052:50052 -e PG_DSN="${{ secrets.PG_DSN }}" -e GRPC_HOST=0.0.0.0 -e GRPC_PORT=50052 $REGISTRY/$IMAGE_NAME:$TAG_NAME
