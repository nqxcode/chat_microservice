package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/nqxcode/chat_microservice/internal/service.ChatService -o ./mocks\chat_service_minimock.go -n ChatServiceMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/nqxcode/chat_microservice/internal/model"
	"github.com/nqxcode/platform_common/pagination"
)

// ChatServiceMock implements service.ChatService
type ChatServiceMock struct {
	t minimock.Tester

	funcCreate          func(ctx context.Context, chat *model.ChatInfo) (i1 int64, err error)
	inspectFuncCreate   func(ctx context.Context, chat *model.ChatInfo)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mChatServiceMockCreate

	funcDelete          func(ctx context.Context, id int64) (err error)
	inspectFuncDelete   func(ctx context.Context, id int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mChatServiceMockDelete

	funcGet          func(ctx context.Context, id int64) (cp1 *model.Chat, err error)
	inspectFuncGet   func(ctx context.Context, id int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mChatServiceMockGet

	funcGetMessages          func(ctx context.Context, id int64, limit *pagination.Limit) (ma1 []model.Message, err error)
	inspectFuncGetMessages   func(ctx context.Context, id int64, limit *pagination.Limit)
	afterGetMessagesCounter  uint64
	beforeGetMessagesCounter uint64
	GetMessagesMock          mChatServiceMockGetMessages

	funcSendMessage          func(ctx context.Context, message *model.Message) (i1 int64, err error)
	inspectFuncSendMessage   func(ctx context.Context, message *model.Message)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mChatServiceMockSendMessage
}

// NewChatServiceMock returns a mock for service.ChatService
func NewChatServiceMock(t minimock.Tester) *ChatServiceMock {
	m := &ChatServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mChatServiceMockCreate{mock: m}
	m.CreateMock.callArgs = []*ChatServiceMockCreateParams{}

	m.DeleteMock = mChatServiceMockDelete{mock: m}
	m.DeleteMock.callArgs = []*ChatServiceMockDeleteParams{}

	m.GetMock = mChatServiceMockGet{mock: m}
	m.GetMock.callArgs = []*ChatServiceMockGetParams{}

	m.GetMessagesMock = mChatServiceMockGetMessages{mock: m}
	m.GetMessagesMock.callArgs = []*ChatServiceMockGetMessagesParams{}

	m.SendMessageMock = mChatServiceMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*ChatServiceMockSendMessageParams{}

	return m
}

type mChatServiceMockCreate struct {
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockCreateExpectation
	expectations       []*ChatServiceMockCreateExpectation

	callArgs []*ChatServiceMockCreateParams
	mutex    sync.RWMutex
}

// ChatServiceMockCreateExpectation specifies expectation struct of the ChatService.Create
type ChatServiceMockCreateExpectation struct {
	mock    *ChatServiceMock
	params  *ChatServiceMockCreateParams
	results *ChatServiceMockCreateResults
	Counter uint64
}

// ChatServiceMockCreateParams contains parameters of the ChatService.Create
type ChatServiceMockCreateParams struct {
	ctx  context.Context
	chat *model.ChatInfo
}

// ChatServiceMockCreateResults contains results of the ChatService.Create
type ChatServiceMockCreateResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for ChatService.Create
func (mmCreate *mChatServiceMockCreate) Expect(ctx context.Context, chat *model.ChatInfo) *mChatServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatServiceMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &ChatServiceMockCreateParams{ctx, chat}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the ChatService.Create
func (mmCreate *mChatServiceMockCreate) Inspect(f func(ctx context.Context, chat *model.ChatInfo)) *mChatServiceMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by ChatService.Create
func (mmCreate *mChatServiceMockCreate) Return(i1 int64, err error) *ChatServiceMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatServiceMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &ChatServiceMockCreateResults{i1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the ChatService.Create method
func (mmCreate *mChatServiceMockCreate) Set(f func(ctx context.Context, chat *model.ChatInfo) (i1 int64, err error)) *ChatServiceMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the ChatService.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the ChatService.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the ChatService.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mChatServiceMockCreate) When(ctx context.Context, chat *model.ChatInfo) *ChatServiceMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatServiceMock.Create mock is already set by Set")
	}

	expectation := &ChatServiceMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &ChatServiceMockCreateParams{ctx, chat},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up ChatService.Create return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockCreateExpectation) Then(i1 int64, err error) *ChatServiceMock {
	e.results = &ChatServiceMockCreateResults{i1, err}
	return e.mock
}

// Create implements service.ChatService
func (mmCreate *ChatServiceMock) Create(ctx context.Context, chat *model.ChatInfo) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, chat)
	}

	mm_params := &ChatServiceMockCreateParams{ctx, chat}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := ChatServiceMockCreateParams{ctx, chat}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("ChatServiceMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the ChatServiceMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, chat)
	}
	mmCreate.t.Fatalf("Unexpected call to ChatServiceMock.Create. %v %v", ctx, chat)
	return
}

// CreateAfterCounter returns a count of finished ChatServiceMock.Create invocations
func (mmCreate *ChatServiceMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of ChatServiceMock.Create invocations
func (mmCreate *ChatServiceMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mChatServiceMockCreate) Calls() []*ChatServiceMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*ChatServiceMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.Create")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to ChatServiceMock.Create")
	}
}

type mChatServiceMockDelete struct {
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockDeleteExpectation
	expectations       []*ChatServiceMockDeleteExpectation

	callArgs []*ChatServiceMockDeleteParams
	mutex    sync.RWMutex
}

// ChatServiceMockDeleteExpectation specifies expectation struct of the ChatService.Delete
type ChatServiceMockDeleteExpectation struct {
	mock    *ChatServiceMock
	params  *ChatServiceMockDeleteParams
	results *ChatServiceMockDeleteResults
	Counter uint64
}

// ChatServiceMockDeleteParams contains parameters of the ChatService.Delete
type ChatServiceMockDeleteParams struct {
	ctx context.Context
	id  int64
}

// ChatServiceMockDeleteResults contains results of the ChatService.Delete
type ChatServiceMockDeleteResults struct {
	err error
}

// Expect sets up expected params for ChatService.Delete
func (mmDelete *mChatServiceMockDelete) Expect(ctx context.Context, id int64) *mChatServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatServiceMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &ChatServiceMockDeleteParams{ctx, id}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the ChatService.Delete
func (mmDelete *mChatServiceMockDelete) Inspect(f func(ctx context.Context, id int64)) *mChatServiceMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by ChatService.Delete
func (mmDelete *mChatServiceMockDelete) Return(err error) *ChatServiceMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatServiceMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &ChatServiceMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the ChatService.Delete method
func (mmDelete *mChatServiceMockDelete) Set(f func(ctx context.Context, id int64) (err error)) *ChatServiceMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the ChatService.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the ChatService.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the ChatService.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mChatServiceMockDelete) When(ctx context.Context, id int64) *ChatServiceMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatServiceMock.Delete mock is already set by Set")
	}

	expectation := &ChatServiceMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &ChatServiceMockDeleteParams{ctx, id},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up ChatService.Delete return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockDeleteExpectation) Then(err error) *ChatServiceMock {
	e.results = &ChatServiceMockDeleteResults{err}
	return e.mock
}

// Delete implements service.ChatService
func (mmDelete *ChatServiceMock) Delete(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, id)
	}

	mm_params := &ChatServiceMockDeleteParams{ctx, id}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := ChatServiceMockDeleteParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("ChatServiceMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the ChatServiceMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, id)
	}
	mmDelete.t.Fatalf("Unexpected call to ChatServiceMock.Delete. %v %v", ctx, id)
	return
}

// DeleteAfterCounter returns a count of finished ChatServiceMock.Delete invocations
func (mmDelete *ChatServiceMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of ChatServiceMock.Delete invocations
func (mmDelete *ChatServiceMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mChatServiceMockDelete) Calls() []*ChatServiceMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*ChatServiceMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.Delete")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to ChatServiceMock.Delete")
	}
}

type mChatServiceMockGet struct {
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockGetExpectation
	expectations       []*ChatServiceMockGetExpectation

	callArgs []*ChatServiceMockGetParams
	mutex    sync.RWMutex
}

// ChatServiceMockGetExpectation specifies expectation struct of the ChatService.Get
type ChatServiceMockGetExpectation struct {
	mock    *ChatServiceMock
	params  *ChatServiceMockGetParams
	results *ChatServiceMockGetResults
	Counter uint64
}

// ChatServiceMockGetParams contains parameters of the ChatService.Get
type ChatServiceMockGetParams struct {
	ctx context.Context
	id  int64
}

// ChatServiceMockGetResults contains results of the ChatService.Get
type ChatServiceMockGetResults struct {
	cp1 *model.Chat
	err error
}

// Expect sets up expected params for ChatService.Get
func (mmGet *mChatServiceMockGet) Expect(ctx context.Context, id int64) *mChatServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ChatServiceMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &ChatServiceMockGetParams{ctx, id}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the ChatService.Get
func (mmGet *mChatServiceMockGet) Inspect(f func(ctx context.Context, id int64)) *mChatServiceMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by ChatService.Get
func (mmGet *mChatServiceMockGet) Return(cp1 *model.Chat, err error) *ChatServiceMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ChatServiceMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &ChatServiceMockGetResults{cp1, err}
	return mmGet.mock
}

// Set uses given function f to mock the ChatService.Get method
func (mmGet *mChatServiceMockGet) Set(f func(ctx context.Context, id int64) (cp1 *model.Chat, err error)) *ChatServiceMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the ChatService.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the ChatService.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the ChatService.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mChatServiceMockGet) When(ctx context.Context, id int64) *ChatServiceMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatServiceMock.Get mock is already set by Set")
	}

	expectation := &ChatServiceMockGetExpectation{
		mock:   mmGet.mock,
		params: &ChatServiceMockGetParams{ctx, id},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up ChatService.Get return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockGetExpectation) Then(cp1 *model.Chat, err error) *ChatServiceMock {
	e.results = &ChatServiceMockGetResults{cp1, err}
	return e.mock
}

// Get implements service.ChatService
func (mmGet *ChatServiceMock) Get(ctx context.Context, id int64) (cp1 *model.Chat, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := &ChatServiceMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := ChatServiceMockGetParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("ChatServiceMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the ChatServiceMock.Get")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to ChatServiceMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished ChatServiceMock.Get invocations
func (mmGet *ChatServiceMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of ChatServiceMock.Get invocations
func (mmGet *ChatServiceMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mChatServiceMockGet) Calls() []*ChatServiceMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*ChatServiceMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.Get")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to ChatServiceMock.Get")
	}
}

type mChatServiceMockGetMessages struct {
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockGetMessagesExpectation
	expectations       []*ChatServiceMockGetMessagesExpectation

	callArgs []*ChatServiceMockGetMessagesParams
	mutex    sync.RWMutex
}

// ChatServiceMockGetMessagesExpectation specifies expectation struct of the ChatService.GetMessages
type ChatServiceMockGetMessagesExpectation struct {
	mock    *ChatServiceMock
	params  *ChatServiceMockGetMessagesParams
	results *ChatServiceMockGetMessagesResults
	Counter uint64
}

// ChatServiceMockGetMessagesParams contains parameters of the ChatService.GetMessages
type ChatServiceMockGetMessagesParams struct {
	ctx   context.Context
	id    int64
	limit *pagination.Limit
}

// ChatServiceMockGetMessagesResults contains results of the ChatService.GetMessages
type ChatServiceMockGetMessagesResults struct {
	ma1 []model.Message
	err error
}

// Expect sets up expected params for ChatService.GetMessages
func (mmGetMessages *mChatServiceMockGetMessages) Expect(ctx context.Context, id int64, limit *pagination.Limit) *mChatServiceMockGetMessages {
	if mmGetMessages.mock.funcGetMessages != nil {
		mmGetMessages.mock.t.Fatalf("ChatServiceMock.GetMessages mock is already set by Set")
	}

	if mmGetMessages.defaultExpectation == nil {
		mmGetMessages.defaultExpectation = &ChatServiceMockGetMessagesExpectation{}
	}

	mmGetMessages.defaultExpectation.params = &ChatServiceMockGetMessagesParams{ctx, id, limit}
	for _, e := range mmGetMessages.expectations {
		if minimock.Equal(e.params, mmGetMessages.defaultExpectation.params) {
			mmGetMessages.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetMessages.defaultExpectation.params)
		}
	}

	return mmGetMessages
}

// Inspect accepts an inspector function that has same arguments as the ChatService.GetMessages
func (mmGetMessages *mChatServiceMockGetMessages) Inspect(f func(ctx context.Context, id int64, limit *pagination.Limit)) *mChatServiceMockGetMessages {
	if mmGetMessages.mock.inspectFuncGetMessages != nil {
		mmGetMessages.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.GetMessages")
	}

	mmGetMessages.mock.inspectFuncGetMessages = f

	return mmGetMessages
}

// Return sets up results that will be returned by ChatService.GetMessages
func (mmGetMessages *mChatServiceMockGetMessages) Return(ma1 []model.Message, err error) *ChatServiceMock {
	if mmGetMessages.mock.funcGetMessages != nil {
		mmGetMessages.mock.t.Fatalf("ChatServiceMock.GetMessages mock is already set by Set")
	}

	if mmGetMessages.defaultExpectation == nil {
		mmGetMessages.defaultExpectation = &ChatServiceMockGetMessagesExpectation{mock: mmGetMessages.mock}
	}
	mmGetMessages.defaultExpectation.results = &ChatServiceMockGetMessagesResults{ma1, err}
	return mmGetMessages.mock
}

// Set uses given function f to mock the ChatService.GetMessages method
func (mmGetMessages *mChatServiceMockGetMessages) Set(f func(ctx context.Context, id int64, limit *pagination.Limit) (ma1 []model.Message, err error)) *ChatServiceMock {
	if mmGetMessages.defaultExpectation != nil {
		mmGetMessages.mock.t.Fatalf("Default expectation is already set for the ChatService.GetMessages method")
	}

	if len(mmGetMessages.expectations) > 0 {
		mmGetMessages.mock.t.Fatalf("Some expectations are already set for the ChatService.GetMessages method")
	}

	mmGetMessages.mock.funcGetMessages = f
	return mmGetMessages.mock
}

// When sets expectation for the ChatService.GetMessages which will trigger the result defined by the following
// Then helper
func (mmGetMessages *mChatServiceMockGetMessages) When(ctx context.Context, id int64, limit *pagination.Limit) *ChatServiceMockGetMessagesExpectation {
	if mmGetMessages.mock.funcGetMessages != nil {
		mmGetMessages.mock.t.Fatalf("ChatServiceMock.GetMessages mock is already set by Set")
	}

	expectation := &ChatServiceMockGetMessagesExpectation{
		mock:   mmGetMessages.mock,
		params: &ChatServiceMockGetMessagesParams{ctx, id, limit},
	}
	mmGetMessages.expectations = append(mmGetMessages.expectations, expectation)
	return expectation
}

// Then sets up ChatService.GetMessages return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockGetMessagesExpectation) Then(ma1 []model.Message, err error) *ChatServiceMock {
	e.results = &ChatServiceMockGetMessagesResults{ma1, err}
	return e.mock
}

// GetMessages implements service.ChatService
func (mmGetMessages *ChatServiceMock) GetMessages(ctx context.Context, id int64, limit *pagination.Limit) (ma1 []model.Message, err error) {
	mm_atomic.AddUint64(&mmGetMessages.beforeGetMessagesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetMessages.afterGetMessagesCounter, 1)

	if mmGetMessages.inspectFuncGetMessages != nil {
		mmGetMessages.inspectFuncGetMessages(ctx, id, limit)
	}

	mm_params := &ChatServiceMockGetMessagesParams{ctx, id, limit}

	// Record call args
	mmGetMessages.GetMessagesMock.mutex.Lock()
	mmGetMessages.GetMessagesMock.callArgs = append(mmGetMessages.GetMessagesMock.callArgs, mm_params)
	mmGetMessages.GetMessagesMock.mutex.Unlock()

	for _, e := range mmGetMessages.GetMessagesMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ma1, e.results.err
		}
	}

	if mmGetMessages.GetMessagesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetMessages.GetMessagesMock.defaultExpectation.Counter, 1)
		mm_want := mmGetMessages.GetMessagesMock.defaultExpectation.params
		mm_got := ChatServiceMockGetMessagesParams{ctx, id, limit}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetMessages.t.Errorf("ChatServiceMock.GetMessages got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetMessages.GetMessagesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetMessages.t.Fatal("No results are set for the ChatServiceMock.GetMessages")
		}
		return (*mm_results).ma1, (*mm_results).err
	}
	if mmGetMessages.funcGetMessages != nil {
		return mmGetMessages.funcGetMessages(ctx, id, limit)
	}
	mmGetMessages.t.Fatalf("Unexpected call to ChatServiceMock.GetMessages. %v %v %v", ctx, id, limit)
	return
}

// GetMessagesAfterCounter returns a count of finished ChatServiceMock.GetMessages invocations
func (mmGetMessages *ChatServiceMock) GetMessagesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMessages.afterGetMessagesCounter)
}

// GetMessagesBeforeCounter returns a count of ChatServiceMock.GetMessages invocations
func (mmGetMessages *ChatServiceMock) GetMessagesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMessages.beforeGetMessagesCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.GetMessages.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetMessages *mChatServiceMockGetMessages) Calls() []*ChatServiceMockGetMessagesParams {
	mmGetMessages.mutex.RLock()

	argCopy := make([]*ChatServiceMockGetMessagesParams, len(mmGetMessages.callArgs))
	copy(argCopy, mmGetMessages.callArgs)

	mmGetMessages.mutex.RUnlock()

	return argCopy
}

// MinimockGetMessagesDone returns true if the count of the GetMessages invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockGetMessagesDone() bool {
	for _, e := range m.GetMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMessagesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMessagesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMessages != nil && mm_atomic.LoadUint64(&m.afterGetMessagesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetMessagesInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockGetMessagesInspect() {
	for _, e := range m.GetMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.GetMessages with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMessagesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMessagesCounter) < 1 {
		if m.GetMessagesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.GetMessages")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.GetMessages with params: %#v", *m.GetMessagesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMessages != nil && mm_atomic.LoadUint64(&m.afterGetMessagesCounter) < 1 {
		m.t.Error("Expected call to ChatServiceMock.GetMessages")
	}
}

type mChatServiceMockSendMessage struct {
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockSendMessageExpectation
	expectations       []*ChatServiceMockSendMessageExpectation

	callArgs []*ChatServiceMockSendMessageParams
	mutex    sync.RWMutex
}

// ChatServiceMockSendMessageExpectation specifies expectation struct of the ChatService.SendMessage
type ChatServiceMockSendMessageExpectation struct {
	mock    *ChatServiceMock
	params  *ChatServiceMockSendMessageParams
	results *ChatServiceMockSendMessageResults
	Counter uint64
}

// ChatServiceMockSendMessageParams contains parameters of the ChatService.SendMessage
type ChatServiceMockSendMessageParams struct {
	ctx     context.Context
	message *model.Message
}

// ChatServiceMockSendMessageResults contains results of the ChatService.SendMessage
type ChatServiceMockSendMessageResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for ChatService.SendMessage
func (mmSendMessage *mChatServiceMockSendMessage) Expect(ctx context.Context, message *model.Message) *mChatServiceMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatServiceMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatServiceMockSendMessageExpectation{}
	}

	mmSendMessage.defaultExpectation.params = &ChatServiceMockSendMessageParams{ctx, message}
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the ChatService.SendMessage
func (mmSendMessage *mChatServiceMockSendMessage) Inspect(f func(ctx context.Context, message *model.Message)) *mChatServiceMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by ChatService.SendMessage
func (mmSendMessage *mChatServiceMockSendMessage) Return(i1 int64, err error) *ChatServiceMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatServiceMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatServiceMockSendMessageExpectation{mock: mmSendMessage.mock}
	}
	mmSendMessage.defaultExpectation.results = &ChatServiceMockSendMessageResults{i1, err}
	return mmSendMessage.mock
}

// Set uses given function f to mock the ChatService.SendMessage method
func (mmSendMessage *mChatServiceMockSendMessage) Set(f func(ctx context.Context, message *model.Message) (i1 int64, err error)) *ChatServiceMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the ChatService.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the ChatService.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	return mmSendMessage.mock
}

// When sets expectation for the ChatService.SendMessage which will trigger the result defined by the following
// Then helper
func (mmSendMessage *mChatServiceMockSendMessage) When(ctx context.Context, message *model.Message) *ChatServiceMockSendMessageExpectation {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatServiceMock.SendMessage mock is already set by Set")
	}

	expectation := &ChatServiceMockSendMessageExpectation{
		mock:   mmSendMessage.mock,
		params: &ChatServiceMockSendMessageParams{ctx, message},
	}
	mmSendMessage.expectations = append(mmSendMessage.expectations, expectation)
	return expectation
}

// Then sets up ChatService.SendMessage return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockSendMessageExpectation) Then(i1 int64, err error) *ChatServiceMock {
	e.results = &ChatServiceMockSendMessageResults{i1, err}
	return e.mock
}

// SendMessage implements service.ChatService
func (mmSendMessage *ChatServiceMock) SendMessage(ctx context.Context, message *model.Message) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(ctx, message)
	}

	mm_params := &ChatServiceMockSendMessageParams{ctx, message}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_got := ChatServiceMockSendMessageParams{ctx, message}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("ChatServiceMock.SendMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessage.SendMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessage.t.Fatal("No results are set for the ChatServiceMock.SendMessage")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmSendMessage.funcSendMessage != nil {
		return mmSendMessage.funcSendMessage(ctx, message)
	}
	mmSendMessage.t.Fatalf("Unexpected call to ChatServiceMock.SendMessage. %v %v", ctx, message)
	return
}

// SendMessageAfterCounter returns a count of finished ChatServiceMock.SendMessage invocations
func (mmSendMessage *ChatServiceMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of ChatServiceMock.SendMessage invocations
func (mmSendMessage *ChatServiceMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mChatServiceMockSendMessage) Calls() []*ChatServiceMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*ChatServiceMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockSendMessageDone() bool {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.SendMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.SendMessage")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.SendMessage with params: %#v", *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		m.t.Error("Expected call to ChatServiceMock.SendMessage")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateInspect()

		m.MinimockDeleteInspect()

		m.MinimockGetInspect()

		m.MinimockGetMessagesInspect()

		m.MinimockSendMessageInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockGetMessagesDone() &&
		m.MinimockSendMessageDone()
}
